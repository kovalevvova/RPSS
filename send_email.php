<?php
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: https://yourdomain.com'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
header('Access-Control-Allow-Methods: POST');
header('Access-Control-Allow-Headers: Content-Type, X-CSRF-Token');

// –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
// error_reporting(E_ALL);
// ini_set('display_errors', 1);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$recipient_email = 'kovalev.vova@mail.ru';
$max_requests_per_hour = 5;
$log_directory = __DIR__ . '/../logs/'; // –õ–æ–≥–∏ –≤–Ω–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
$log_file = $log_directory . 'form_requests.log';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!file_exists($log_directory)) {
    mkdir($log_directory, 0700, true);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log_request($ip, $data, $is_spam = false) {
    global $log_file;

    $timestamp = date('Y-m-d H:i:s');
    $status = $is_spam ? 'SPAM' : 'VALID';

    // –û—á–∏—â–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
    $log_data = $data;
    unset($log_data['csrf_token']);
    $log_data['phone'] = substr($data['phone'], 0, 3) . '***' . substr($data['phone'], -3);
    if (!empty($log_data['email'])) {
        $log_data['email'] = substr($data['email'], 0, 3) . '***' . strstr($data['email'], '@');
    }

    $log_entry = "[$timestamp] [$status] IP: $ip | Data: " . json_encode($log_data) . "\n";

    if (file_put_contents($log_file, $log_entry, FILE_APPEND | LOCK_EX) === false) {
        error_log("Cannot write to log file: $log_file");
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function validate_email($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function validate_phone($phone) {
    $cleaned = preg_replace('/[^\d+]/', '', $phone);
    $digits = preg_replace('/\D/', '', $cleaned);
    return strlen($digits) >= 10 && strlen($digits) <= 15;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–∞
function validate_csrf_token($token) {
    return !empty($token) && preg_match('/^csrf_[a-z0-9]+_\d+$/', $token);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
function is_spam($data, $ip) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–∞
    if (empty($data['csrf_token']) || !validate_csrf_token($data['csrf_token'])) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ honeypot –ø–æ–ª–µ–π
    if (!empty($data['company']) || !empty($data['email_confirm']) ||
        (isset($data['agree_terms']) && $data['agree_terms'] === '1')) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (empty($data['name']) || empty($data['phone']) || empty($data['security_question'])) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏
    if (strlen(trim($data['name'])) < 2 || strlen(trim($data['name'])) > 50) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (!empty($data['email']) && !validate_email($data['email'])) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!validate_phone($data['phone'])) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
    if (!empty($data['message']) && strlen(trim($data['message'])) < 5) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!empty($data['message']) && strlen(trim($data['message'])) > 1000) {
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    global $max_requests_per_hour;
    if (check_request_frequency($ip, $max_requests_per_hour)) {
        return true;
    }

    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
function check_request_frequency($ip, $max_per_hour) {
    global $log_file;
    if (!file_exists($log_file)) return false;

    $one_hour_ago = time() - 3600;
    $ip_count = 0;

    $logs = file($log_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($logs as $log) {
        if (strpos($log, $ip) !== false && strpos($log, 'VALID') !== false) {
            preg_match('/\[(.*?)\]/', $log, $matches);
            if (isset($matches[1])) {
                $log_time = strtotime($matches[1]);
                if ($log_time >= $one_hour_ago) {
                    $ip_count++;
                }
            }
        }
    }

    return $ip_count >= $max_per_hour;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ PHPMailer (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
function send_email_phpmailer($to, $subject, $body, $from_email, $from_name) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å PHPMailer
    // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

    $headers = "MIME-Version: 1.0\r\n";
    $headers .= "Content-type: text/html; charset=utf-8\r\n";
    $headers .= "From: $from_name <$from_email>\r\n";
    $headers .= "Reply-To: $from_email\r\n";
    $headers .= "X-Mailer: PHP/" . phpversion();

    // –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –≤ UTF-8
    $subject = '=?UTF-8?B?' . base64_encode($subject) . '?=';

    return mail($to, $subject, $body, $headers);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    $input = json_decode(file_get_contents('php://input'), true);
    $ip = $_SERVER['REMOTE_ADDR'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
    if (is_spam($input, $ip)) {
        log_request($ip, $input, true);
        http_response_code(400);
        echo json_encode(['success' => false, 'error' => 'spam_detected']);
        exit;
    }

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    $name = htmlspecialchars(trim($input['name']), ENT_QUOTES, 'UTF-8');
    $phone = htmlspecialchars(trim($input['phone']), ENT_QUOTES, 'UTF-8');
    $email = htmlspecialchars(trim($input['email']), ENT_QUOTES, 'UTF-8');
    $security_question = htmlspecialchars(trim($input['security_question']), ENT_QUOTES, 'UTF-8');
    $message = htmlspecialchars(trim($input['message']), ENT_QUOTES, 'UTF-8');

    // –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
    $object_types = [
        'apartment' => '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
        'house' => '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º',
        'office' => '–û—Ñ–∏—Å',
        'commercial' => '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        'other' => '–î—Ä—É–≥–æ–µ'
    ];
    $object_type = isset($object_types[$security_question]) ? $object_types[$security_question] : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
    $email_body = "
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset=\"utf-8\">
        <title>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background: #d32f2f; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background: #f9f9f9; }
            .field { margin-bottom: 15px; padding: 10px; background: white; border-left: 4px solid #d32f2f; }
            .label { font-weight: bold; color: #d32f2f; display: inline-block; width: 120px; }
            .footer { padding: 15px; text-align: center; background: #eee; font-size: 12px; color: #666; }
        </style>
    </head>
    <body>
        <div class='header'>
            <h2>üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–∂–∞—Ä–Ω–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã</h2>
        </div>
        <div class='content'>
            <div class='field'><span class='label'>üë§ –ò–º—è:</span> $name</div>
            <div class='field'><span class='label'>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</span> $phone</div>
            <div class='field'><span class='label'>‚úâÔ∏è Email:</span> " . ($email ? $email : '–ù–µ —É–∫–∞–∑–∞–Ω') . "</div>
            <div class='field'><span class='label'>üè¢ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</span> $object_type</div>
            <div class='field'><span class='label'>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</span> " . ($message ? nl2br($message) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ') . "</div>
            <div class='field'><span class='label'>üåê IP –∞–¥—Ä–µ—Å:</span> $ip</div>
            <div class='field'><span class='label'>üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</span> " . date('d.m.Y H:i') . "</div>
        </div>
        <div class='footer'>
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–∂–∞—Ä–Ω–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã</p>
        </div>
    </body>
    </html>
    ";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    $subject = "üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: $name - $object_type";
    $from_email = "noreply@rpss.ru";
    $from_name = "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–∂–∞—Ä–Ω–æ-—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞";

    if (send_email_phpmailer($recipient_email, $subject, $email_body, $from_email, $from_name)) {
        log_request($ip, $input, false);
        echo json_encode(['success' => true, 'message' => '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞']);
    } else {
        error_log("Failed to send email to: $recipient_email");
        echo json_encode(['success' => false, 'error' => 'email_send_failed']);
    }
} else {
    http_response_code(405);
    echo json_encode(['success' => false, 'error' => 'method_not_allowed']);
}
?>